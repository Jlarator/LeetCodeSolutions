/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

#include <stdlib.h>
#include <string.h>
#include <stdio.h>

void moveUp(char*target){
  int len = strlen(target);
  if(target[len - 1] != ' ') return;

  int shift = 0;
  int start = 0;
  int size = 0;
  int shiftStart = 0; 
  for(int i = len -1; i >= 0; i--){

    if((target[i] == ' ') && (size == 0))shift++;
    if((target[i] != ' ') && (size == 0)) shiftStart = i; 
    if((target[i] != ' ') ) size++;
    if((target[i] == ' ') && size != 0){
      start = i + 1;
      break;
    }

  }

  int left = len - 1; 
  for(int i = 0; i < size; i++){
    target[left] = target[shiftStart];
    target[shiftStart] = ' '; 
    left--;
    shiftStart--; 
  }

}

void stringCopy(char* target, char* new ){
  //  printf("\nCopying: %s\n", new); 
  int len = strlen(new);

  for(int i = 0; i < len; i++){
    target[i] = new[i]; 
  }  
}

void checkSpaces(char* target, int maxWidth){
  printf("Checking spaces for: |%s|\n",target); 
  moveUp(target); 
  int gaps = 0;
  int spaces = 0;
  char prev = '0' ; 
  for(int i = 0; i < maxWidth; i++){

    if(prev == ' ' && target[i] != ' ') gaps++; 
    if(target[i] == ' ') spaces++;
    prev = target[i]; 
    //    printf(" %c ", target[i]); 

  }

  // redistribute spaces per gaps
  int spacesPerGap = 0;
  int extra = 0; 
  if(gaps != 0){
    spacesPerGap = spaces / gaps;
    extra = spaces % gaps; 
    //    extra =(extra == 1) ? 0 :extra;     
  }

  printf("Space count = %d | Gaps: %d | Extra: %d\n", spaces, gaps, extra);

  char temp[maxWidth];
  int tempIndex = 0;

  for(int i = 0; i < maxWidth; i++){
    if(target[i] != ' '){
      temp[tempIndex] = target[i];
      tempIndex++; 
    }else{
      if(gaps == 0){
    temp[tempIndex] = target[i];	
    tempIndex++; 
      }else{

    for(int k = 0; k < spacesPerGap; k++){
      if(tempIndex == maxWidth - 1) break;
      if(spaces == 0) break; 
      temp[tempIndex] = ' ' ;
      tempIndex++;
      spaces--;

      if(extra > 0){
        temp[tempIndex] = ' ';
        tempIndex++;
        extra--;
        spaces--;
      }	
    }

      }
    }    
  }

  for(int i = 0; i < maxWidth; i++){
    target[i] = temp[i]; 

  }
  printf("\n"); 

}

char ** fullJustify(char ** words, int wordsSize, int maxWidth, int* returnSize){  

  printf("INIt return size %d\n", *returnSize);
  printf("MaxWidth: %d\n", maxWidth);
  printf("Words to process: %d\n", wordsSize); 

  int charCount = 0;      
  int rowCount = 0;     
  int wordCount = 0;      

  for(int i = 0; i < wordsSize; i++){
    charCount += strlen(words[i]);

    if(i + 1 < wordsSize){          
      if( (charCount += strlen(words[i+1]) + 1) >= maxWidth){
    printf("\n"); 
    rowCount++;  
    charCount = 0;        
      }     
    }else{

      /* printf("Last check: %d\n", charCount); */
      /* while(charCount > 0){ */
      /* 	rowCount++; */
      /* 	charCount -= maxWidth; */
      /* } */
    }
  }

  char** output;   
  output = (char**)malloc(sizeof(char*) * rowCount);   
  for(int ir = 0; ir < rowCount; ir++){        
    output[ir] = (char*)malloc(sizeof(char) * (maxWidth + 1));  
    for(int m = 0; m < maxWidth ; m++){    
      output[ir][m] = ' ';    
    }
    output[ir][maxWidth] = '\0';	
  }      

  charCount = 0;
  int nextCount = 0;
  wordCount = 0;
  int wordsIndex = 0;
  int row = 0;
  int index = 0;
  int temp = 0;  
  printf("\n");

    int wordsApplied = 0; 
      for(int i = 0; i < rowCount; i++){
        charCount = strlen(words[wordsIndex]);
        index = 0;
        wordsApplied = 0; 
        while((charCount <= maxWidth) && (wordsIndex < wordsSize)){
          printf("Adding: |%s|\n", words[wordsIndex]); 
          stringCopy(&output[i][index], words[wordsIndex]);
          wordsApplied++; 
          index +=  strlen(words[wordsIndex]) + 1;
          printf("words Index: %d\n", wordsIndex); 
          wordsIndex++; // move up to the next word

          if(wordsIndex < wordsSize) charCount += strlen(words[wordsIndex]) + 1;

         printf("> --- --- --- <\n"); 

        }
        //    printf("\n"); 
          printf("Output Index: %d\n", i); 
        printf("Done with: |%s|\n\n", output[i]); 
        if((i + 1) < rowCount && (wordsApplied > 1)) checkSpaces(output[i], maxWidth);   
      }

  *returnSize = rowCount; 
  printf("\nReturn size assigned to %d\n", *returnSize); 
  return output; 

}
